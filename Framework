#!/bin/bash

# ==========================
# Authour - Eithan Saragosti
# All rights reserved
# ==========================

# ==========================
# Basic Configurations
# ==========================
VERSION="1.4"
SCRIPT_DIR=$(dirname "$(realpath "$0")")
TOOLS_DIR="$SCRIPT_DIR/tools"
LOG_FILE="$SCRIPT_DIR/acetools.log"
CONFIG_FILE="$SCRIPT_DIR/.acetools_config"

# ==========================
# Colors
# ==========================
RED="\033[0;31m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
BOLD="\033[1m"
RESET="\033[0m"

# ==========================
# Helper Functions
# ==========================
log_message() {
    local message="$1"
    local timestamp
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo -e "$timestamp - $message" >> "$LOG_FILE"
}

check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}Error: This script must be run as root!${RESET}"
        exit 1
    fi
}

check_tools() {
    local tools=("figlet" "lolcat")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            echo -e "${RED}Error: $tool not found! Please install it.${RESET}"
            exit 1
        fi
    done
}

show_banner() {
    clear
    figlet -f slant "Ace Tools" | lolcat
    echo -e "${CYAN}${BOLD}Welcome to AceTools v${VERSION}!${RESET}"
    log_message "Script started"
}

initialize_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "USER_NAME=default" >"$CONFIG_FILE"
        echo "LOG_LEVEL=info" >>"$CONFIG_FILE"
        log_message "Configuration initialized."
    fi
}

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo -e "${YELLOW}No configuration found. Initializing...${RESET}"
        initialize_config
    fi
}

edit_config() {
    echo -e "${CYAN}Edit Configuration:${RESET}"
    nano "$CONFIG_FILE"
}

list_tool_descriptions() {
    echo -e "\n${CYAN}Tool Descriptions:${RESET}"
    local tool_scripts=("$TOOLS_DIR"/*.sh)

    for tool in "${tool_scripts[@]}"; do
        local tool_name
        tool_name=$(basename "$tool" .sh)
        local description
        description=$(grep -m 1 '^# DESC:' "$tool" | sed 's/# DESC: //')

        if [ -z "$description" ]; then
            description="No description provided."
        fi

        echo -e "${GREEN}$tool_name:${RESET} $description"
    done
    echo -e ""
}

show_tools_menu() {
    echo -e "\n${CYAN}Available Tools:${RESET}"
    local tool_scripts=("$TOOLS_DIR"/*.sh)
    local index=1

    for tool in "${tool_scripts[@]}"; do
        tool_name=$(basename "$tool" .sh)
        echo "$index) $tool_name"
        ((index++))
    done
    echo "$index) Help"
    echo "$((index + 1))) Exit"
    echo -ne "${CYAN}Select an option (1-$((index + 1))): ${RESET}"
    read -r choice

    # Add spaces for readability
    echo -e "\n"

    if [[ "$choice" -ge 1 && "$choice" -lt "$index" ]]; then
        run_tool "${tool_scripts[$((choice - 1))]}"
    elif [[ "$choice" -eq "$index" ]]; then
        show_help
    elif [[ "$choice" -eq $((index + 1)) ]]; then
        exit_message
        exit 0
    else
        echo -e "${RED}Invalid option. Please try again.${RESET}"
    fi
}

run_tool() {
    local tool_script="$1"
    echo -e "${GREEN}Running $(basename "$tool_script" .sh)...${RESET}"
    bash "$tool_script"
    local status=$?
    if [ $status -eq 0 ]; then
        echo -e "${CYAN}${BOLD}$(basename "$tool_script" .sh) completed successfully!${RESET}"
        log_message "$(basename "$tool_script") executed successfully."
    else
        echo -e "${RED}Error: $(basename "$tool_script" .sh) encountered an issue.${RESET}"
        log_message "$(basename "$tool_script") execution failed."
    fi
}

show_help() {
    echo -e "\n${CYAN}Tool Descriptions:${RESET}"
    local tool_scripts=("$TOOLS_DIR"/*.sh)

    for tool in "${tool_scripts[@]}"; do
        local tool_name
        tool_name=$(basename "$tool" .sh)
        local description
        description=$(grep -m 1 '^# DESC:' "$tool" | sed 's/# DESC: //')

        if [ -z "$description" ]; then
            description="No description provided."
        fi

        echo -e "${GREEN}$tool_name:${RESET} $description"
    done
    echo -e "${YELLOW}Use the menu to run any tool.${RESET}"
    echo -e "\n"  # Add space after help
}

exit_message() {
    figlet -f slant "Goodbye" | lolcat
    echo -e "${CYAN}${BOLD}Thank you for using AceTools!${RESET}"
    log_message "User exited AceTools"
}

# ==========================
# Main Script Logic
# ==========================
check_root
check_tools
show_banner
list_tool_descriptions  # Show descriptions after the banner
load_config

while true; do
    show_tools_menu
done
